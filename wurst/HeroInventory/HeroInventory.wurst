//TODO unhock triggers / block execution to prevent activation on trigger action
//TODO abstract inventory state with inheritance
//TEMEMBER Item class and level useable
// MAybe: stacksizes
//TODO allow appropirate action in states (if in quip allow pickup equip)
// block actions while backpack
// addItem triggers pickup, remove triggers drop
// move triggers moveto and pickup
//ammo, sockets
package HeroInventory
    import InventoryItems
    import Unit2
    import Player2
    import UnitIndexer
    import BaseObjects

    HeroInventory array heroInventories

    enum InventoryState
        Belt
        Equip
        Back

    init
        CreateTrigger()
            ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_USE_ITEM)
            ..addAction(function switchState)
        CreateTrigger()
            ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER)
            ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER)
            ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_ISSUED_ORDER)
            ..addAction(function trackItemUsage)
        CreateTrigger()
            ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_DROP_ITEM)
            ..addAction(function dropItem)
        CreateTrigger()
            ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_PICKUP_ITEM)
            ..addAction(function pickupItem)
        CreateTrigger()
            ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER)
            ..addAction(function pickupItemOrder)
        CreateTrigger()
            ..registerTimerEvent(1.0, false)
            ..addAction(function index)


    // Tracks item movement and usage across the slots
    function trackItemUsage()
        int id = GetIssuedOrderId()
        if id < 852001 or id > 852014
            return
        unit u = GetTriggerUnit()
        HeroInventory heroInv = HeroInventory.getHeroInventory(u)
        if heroInv == null
            return
        //TODO unloop
        // Move item in inventory 852002-7
        for int i = 0 to 5
            int newId = 852002 + i
            if id == newId
                heroInv.moveItemToSlotOrder(i)
                return
        // Use item 852008-13
        for int i = 0 to 5
            int newId = 852008 + i
            if id == newId
                heroInv.useItemOrder(i)
                return

    function dropItem()
        unit u = GetTriggerUnit()
        HeroInventory heroInv = HeroInventory.getHeroInventory(u)
        if heroInv == null
            return
        heroInv.dropItemAction(GetManipulatedItem())

    function pickupItem()
        unit u = GetTriggerUnit()
        HeroInventory heroInv = HeroInventory.getHeroInventory(u)
        if heroInv == null
            return
        heroInv.pickupItemAction(GetManipulatedItem())

    function pickupItemOrder()
        item i = GetOrderTargetItem()
        if i == null
            return
        unit u = GetTriggerUnit()
        HeroInventory heroInv = HeroInventory.getHeroInventory(u)
        if heroInv == null
            return
        heroInv.pickupItemOrder(i)

    function switchState()
        unit u = GetTriggerUnit()
        HeroInventory heroInv = HeroInventory.getHeroInventory(u)
        if heroInv == null
            return
        int itt = GetManipulatedItem().getTypeId()
        if itt == BELT_ITEM_ID
            heroInv.switchToBelt()
        else if itt == EQUIPPED_ITEM_ID
            heroInv.switchToEquip()
        else if itt == BACKPACK_ITEM_ID
            heroInv.switchToBack()

    function index()
        group g = GetUnitsInRectAll(GetPlayableMapRect())
        for unit u in g
            if u.isHero()
                HeroInventory.createHeroInventory(u)
        g.destr()
            
    class HeroInventory
        private unit hero
        private InventoryState state = InventoryState.Belt
        private InventoryItems beltItems
        private InventoryItems equipItems
        private InventoryItems backItems
        private boolean blockPickupTrigger = false

        static function createHeroInventory(unit u)
            let hi = new HeroInventory(u)
            heroInventories[u.getIndex()] = hi

        static function getHeroInventory(unit u) returns HeroInventory
            return heroInventories[u.getIndex()]

        private construct(unit u)
            hero = u
            u.addItemInSlot(BACKPACK_ITEM_ID, 4)
            u.addItemInSlot(EQUIPPED_ITEM_ID, 5)
            beltItems = new InventoryItems()
            beltItems.setItemInSlot(BACKPACK_ITEM_ID, 4)
            beltItems.setItemInSlot(EQUIPPED_ITEM_ID, 5)
            equipItems = new InventoryItems()
            equipItems.setItemInSlot(BELT_ITEM_ID, 4)
            backItems = new InventoryItems()
            backItems.setItemInSlot(BELT_ITEM_ID, 5)

        function useItemOrder(int fromSlot)
            // Prevent item usage in equipment
            if state  == InventoryState.Equip and fromSlot != SLOT_BOTTOM_LEFT
                hero.abortOrder()
                hero.getOwner().simulateError("You cannot use items from your equipment")
                return
            // Prevent item usage in backpack
            if state  == InventoryState.Back and fromSlot != SLOT_BOTTOM_RIGHT
                hero.abortOrder()
                hero.getOwner().simulateError("You cannot use items from your backpack")
                return
    
        // Handles moving an item to a slot
        function moveItemToSlotOrder(int toSlot)
            // Detect current item in target slot
            let oldState = new InventoryItems()
            oldState.saveFromUnit(hero)
            item toItm = hero.getItemInSlot(toSlot)
            int toItmType = toItm.getTypeId()
            toItm.remove()
            // Wait for moveorder to complete
            blockPickupTrigger = true
            TriggerSleepAction(0)
            blockPickupTrigger = false
            // Detect new item in target slot
            let newState = new InventoryItems()
            newState.saveFromUnit(hero)
            item fromItm = hero.getItemInSlot(toSlot)
            int fromItmType = fromItm.getTypeId()
            fromItm.remove()
            int fromSlot = oldState.findMissingItem(fromItmType, newState)
            destroy newState
            destroy oldState
            // Prevent moving of switch items
            if isSwitchItem(fromItmType)
                hero.addItemInSlot(toItmType, toSlot)
                hero.addItemInSlot(fromItmType, fromSlot)
                return
            // Reset switch item if moved onto
            if isSwitchItem(toItmType)
                hero.addItemInSlot(toItmType, toSlot)
            // Move item to equip
            if toItmType == EQUIPPED_ITEM_ID
                //TODO tryEquip
                if (equipItems.addItem(fromItmType) == -1)
                    hero.addItemInSlot(fromItmType, fromSlot)
                print("TODO Equip call")
                return
            // Move item to backpack
            if toItmType == BACKPACK_ITEM_ID
                if (backItems.addItem(fromItmType) == -1)
                    hero.addItemInSlot(fromItmType, fromSlot)
                    hero.getOwner().simulateError("Your backpack is full")
                return
            // Move item to belt
            if toItmType == BELT_ITEM_ID
                blockPickupTrigger = true
                if (beltItems.addItem(fromItmType) == -1)
                    hero.addItemInSlot(fromItmType, fromSlot)
                    hero.getOwner().simulateError("Your belt is full")
                if state == InventoryState.Equip
                    print("TODO Unequip call")
                blockPickupTrigger = false
                return
            // Prevent moving within equipment
            if state == InventoryState.Equip
                hero.addItemInSlot(toItmType, toSlot)
                hero.addItemInSlot(fromItmType, fromSlot)
                hero.getOwner().simulateError("You cannot move items within your inventory")
                return
            // Default action, switch items
            hero.addItemInSlot(toItmType, fromSlot)
            hero.addItemInSlot(fromItmType, toSlot)
    
        function dropItemAction(item itm)
            skip
    
        function pickupItemAction(item itm)
            skip
    
        function pickupItemOrder(item itm)
            if blockPickupTrigger
                return
            if state == InventoryState.Equip
                hero.abortOrder()
                hero.getOwner().simulateError("You cannot pickup items from your equipment")

        function switchToBelt()
            saveCurrentInventoryItems()
            clearInventory()
            beltItems.fillIntoUnit(hero)
            state = InventoryState.Belt

        function switchToEquip()
            saveCurrentInventoryItems()
            clearInventory()
            equipItems.fillIntoUnit(hero)
            state = InventoryState.Equip

        function switchToBack()
            saveCurrentInventoryItems()
            clearInventory()
            backItems.fillIntoUnit(hero)
            state = InventoryState.Back

        private function saveCurrentInventoryItems()
            if state == InventoryState.Belt
                beltItems.saveFromUnit(hero)
            else if state == InventoryState.Equip
                equipItems.saveFromUnit(hero)
            else if state == InventoryState.Back
                backItems.saveFromUnit(hero)

        //TODO move into invItems
        private function clearInventory()
            for i = 0 to 5
                hero.dropItemInSlot(i).remove()

        private static function isSwitchItem(item itm) returns boolean
            return isSwitchItem(itm.getTypeId())

        private static function isSwitchItem(int itmTyp) returns boolean
            return itmTyp == BELT_ITEM_ID or itmTyp == EQUIPPED_ITEM_ID or itmTyp == BACKPACK_ITEM_ID